name: build and release

on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2
  
    - name: Import required modules
      run: |
        Set-PSRepository PSGallery -InstallationPolicy Trusted
        Install-Module -Name Pester, InvokeBuild, PlatyPS, PSScriptAnalyzer, AzAuth -Force -SkipPublisherCheck
      shell: pwsh

    - name: Get version number and run build
      run: |
        $Pattern = '^(refs\/tags\/|)[vV]?(?<versionNumber>[0-9\.]{1,10}).*'
        $versionNumber = [regex]::Match("${{ github.ref }}",$Pattern).Groups['versionNumber'].Value

        if ([string]::IsNullOrEmpty( $versionNumber )) {
          # If this is manually triggered we will see if latest release is already on PSGallery.
          # If it isn't, assume this is a retry and use this version
          $latestReleasedTag = (Invoke-RestMethod 'https://api.github.com/repos/AZDOPS/AZDOPS/releases/latest').tag_name
          $versionNumber = [regex]::Match("$latestReleasedTag", $Pattern).Groups['versionNumber'].Value

          $PublishedVersion = Find-Module ADOPS -MinimumVersion $versionNumber -MaximumVersion $versionNumber -ErrorAction SilentlyContinue
          if ($PublishedVersion.Version -eq $versionNumber) {
                throw "$VersionNumber appears to already be published. Fix this issue and retry. Or dont. I'm a workflow, not the law."
          }
          else {
            Write-Host "$VersionNumber does not appear to be released. Going on."
          }
        }
        Write-Host "Versionnumber: $versionNumber"
        Invoke-Build -Version $versionNumber
      shell: pwsh
    
    - name: publish to PSGallery
      env:
        NUGET_KEY: ${{ secrets.NUGET_KEY }}
      shell: pwsh
      run: |
        Get-ChildItem "${{ github.workspace }}\Bin\ADOPS" -recurse
        Publish-Module -Path "${{ github.workspace }}\Bin\ADOPS" -NuGetApiKey $env:NUGET_KEY -Verbose
